//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::UserRole;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub role: UserRole,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::batch_allocations::Entity")]
    BatchAllocations,
    #[sea_orm(has_many = "super::batches::Entity")]
    Batches,
    #[sea_orm(has_many = "super::production_lines::Entity")]
    ProductionLines,
    #[sea_orm(has_many = "super::purchases::Entity")]
    Purchases,
}

impl Related<super::batch_allocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BatchAllocations.def()
    }
}

impl Related<super::batches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Batches.def()
    }
}

impl Related<super::production_lines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductionLines.def()
    }
}

impl Related<super::purchases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Purchases.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
