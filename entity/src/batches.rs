//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::BatchStatus;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "batches")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub batch_id: i32,
    pub line_id: i32,
    pub supervisor_id: i32,
    pub start_date: Date,
    pub end_date: Date,
    pub initial_bird_count: i32,
    pub current_bird_count: i32,
    pub status: Option<BatchStatus>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::batch_requirements::Entity")]
    BatchRequirements,
    #[sea_orm(has_many = "super::bird_count_history::Entity")]
    BirdCountHistory,
    #[sea_orm(has_many = "super::bird_sell_history::Entity")]
    BirdSellHistory,
    #[sea_orm(
        belongs_to = "super::production_lines::Entity",
        from = "Column::LineId",
        to = "super::production_lines::Column::LineId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ProductionLines,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::SupervisorId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::batch_requirements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BatchRequirements.def()
    }
}

impl Related<super::bird_count_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BirdCountHistory.def()
    }
}

impl Related<super::bird_sell_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BirdSellHistory.def()
    }
}

impl Related<super::production_lines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductionLines.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
