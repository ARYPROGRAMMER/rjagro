//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize)]
#[sea_orm(table_name = "batch_allocations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub allocation_id: i32,
    pub requirement_id: i32,
    pub purchase_id: i32,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub allocated_qty: Decimal,
    pub allocation_date: Date,
    pub allocated_by: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::batch_requirements::Entity",
        from = "Column::RequirementId",
        to = "super::batch_requirements::Column::RequirementId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BatchRequirements,
    #[sea_orm(
        belongs_to = "super::purchases::Entity",
        from = "Column::PurchaseId",
        to = "super::purchases::Column::PurchaseId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Purchases,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AllocatedBy",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::batch_requirements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BatchRequirements.def()
    }
}

impl Related<super::purchases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Purchases.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
