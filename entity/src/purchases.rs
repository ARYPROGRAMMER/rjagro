//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "purchases")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub purchase_id: i32,
    pub item_code: String,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub cost_per_unit: Decimal,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub total_cost: Option<Decimal>,
    pub purchase_date: Date,
    pub supplier: Option<String>,
    pub created_by: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,

    #[sea_orm(
        belongs_to = "super::items::Entity",
        from = "Column::ItemCode",
        to = "super::items::Column::ItemCode",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Items,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
