//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::PurchaseCategory;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize)]
#[sea_orm(table_name = "purchases")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub purchase_id: i32,
    pub category: PurchaseCategory,
    pub item_name: String,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub quantity: Decimal,
    pub unit: String,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub cost_per_unit: Decimal,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub total_cost: Decimal,
    pub purchase_date: Date,
    pub supplier: String,
    pub created_by: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::batch_allocations::Entity")]
    BatchAllocations,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::batch_allocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BatchAllocations.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
