//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize)]
#[sea_orm(table_name = "bird_sell_history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub sale_id: i32,
    pub batch_id: i32,
    pub trader_id: i32,
    pub sale_date: Date,
    pub quantity_sold: i32,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub price_per_bird: Decimal,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub total_amount: Decimal,
    #[sea_orm(column_type = "Text")]
    pub notes: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::batches::Entity",
        from = "Column::BatchId",
        to = "super::batches::Column::BatchId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Batches,
    #[sea_orm(
        belongs_to = "super::traders::Entity",
        from = "Column::TraderId",
        to = "super::traders::Column::TraderId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Traders,
}

impl Related<super::batches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Batches.def()
    }
}

impl Related<super::traders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Traders.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
