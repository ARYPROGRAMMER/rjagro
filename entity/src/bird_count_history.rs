//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "bird_count_history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub record_id: i32,
    pub batch_id: i32,
    pub record_date: Date,
    pub deaths: i32,
    pub additions: i32,
    #[sea_orm(column_type = "Text")]
    pub notes: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::batches::Entity",
        from = "Column::BatchId",
        to = "super::batches::Column::BatchId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Batches,
}

impl Related<super::batches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Batches.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
