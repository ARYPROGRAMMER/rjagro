//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "batch_requirements")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub requirement_id: i32,
    pub batch_id: i32,
    pub line_id: i32,
    pub supervisor_id: i32,
    pub item_code: String,
    #[sea_orm(column_type = "Decimal(Some((12, 2)))")]
    pub quantity: Decimal,
    pub status: super::sea_orm_active_enums::RequirementStatus,
    pub request_date: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::batch_allocations::Entity")]
    BatchAllocations,
    #[sea_orm(
        belongs_to = "super::batches::Entity",
        from = "Column::BatchId",
        to = "super::batches::Column::BatchId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Batches,
    #[sea_orm(
        belongs_to = "super::production_lines::Entity",
        from = "Column::LineId",
        to = "super::production_lines::Column::LineId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ProductionLines,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::SupervisorId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Supervisors,
    #[sea_orm(
        belongs_to = "super::items::Entity",
        from = "Column::ItemCode",
        to = "super::items::Column::ItemCode",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Items,
}

impl Related<super::production_lines::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductionLines.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Supervisors.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::batches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Batches.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
